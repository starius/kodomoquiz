local logic = {}

-- source: http://children.kulichki.net/vopros/logika.htm

-- based on http://lua-users.org/wiki/SplitJoin
local split = function(self, sep, nMax, plain)
    if not sep then
        sep = '%s+'
    end
    assert(sep ~= '')
    assert(nMax == nil or nMax >= 1)
    local aRecord = {}
    if self:len() > 0 then
        nMax = nMax or -1
        local nField = 1
        local nStart = 1
        local nFirst, nLast = self:find(sep, nStart, plain)
        while nFirst and nMax ~= 0 do
            aRecord[nField] = self:sub(nStart, nFirst - 1)
            nField = nField + 1
            nStart = nLast + 1
            nFirst, nLast = self:find(sep, nStart, plain)
            nMax = nMax - 1
        end
        aRecord[nField] = self:sub(nStart)
    end
    return aRecord
end

local unpack = unpack or table.unpack

local function logic_task(str)
    local lines = split(str, "\n")
    assert(#lines == 5)
    return lines[1],
        lines[2],
        lines[3],
        lines[4],
        "все ответы неправильные",
        "Выберите утверждение, являющееся следствием данного утверждения:"
end

function logic.shmurdik(req)
return logic_task [[
Шмурдик боится как мышей, так и тараканов
шмурдик боится мышей
шмурдик не боится тараканов
шмурдик боится мышей больше, чем тараканов, но и тараканов боится тоже
]]
end

function logic.grymzik(req)
return logic_task [[
Известно, что грымзик обязательно или полосат, или рогат, или то и другое вместе
грымзик не может быть однотонным и безрогим одновременно
грымзик не может быть безрогим
грымзик не может быть полосатым и безрогим одновременно
]]
end

function logic.zaryrka(req)
return logic_task [[
Если запырку отравить, то она сразу начнет пускать пузыри
если запырка не пускает пузыри, то она не отравлена
если запырка пускает пузыри, то она была отравлена
если запырку не отравить, то она не будет пускать пузыри
]]
end

function logic.ohlotushka(req)
return logic_task [[
Все охлотушки умеют играть в шашки
не бывает охлотушек, которые не умеют играть в шашки
все, кто умеет играть в шашки, являются охлотушками
не бывает охлотушек, которые умеют играть в шашки
]]
end

function logic.dubarator(req)
return logic_task [[
Дубараторы бывают либо хорошими, либо плохими. Неправда, что этот дубаратор не плохой
этот дубаратор плохой
этот дубаратор хороший
этот дубаратор средненький
]]
end

function logic.tial(req)
return logic_task [[
В природе обнаружено более десятка тиалей. Все обнаруженные тиали сплошь красного цвета
по крайней мере некоторые из тиалей красного цвета
по крайней мере некоторые из тиалей зеленые
некоторые тиали (из тех, что уже обнаружены) могут оказаться не красными
]]
end

function logic.shakal(req)
return logic_task [[
Существуют шакалы с больной мухропендией
не всякий шакал может похвастаться здоровой мухропендией
не всякий шакал может похвастаться больной мухропендией
существуют шакалы со здоровой мухропендией
]]
end

function logic.tumelnica(req)
return logic_task [[
Неправда, что наша тумельница большая и круглая
наша тумельница маленькая, или некруглая, или то и другое вместе
наша тумельница маленькая и некруглая
наша тумельница маленькая, или некруглая, но не то и другое вместе
]]
end

function logic.john(req)
return logic_task [[
Джон всегда либо урдит, либо мурлит
Джон никогда не занимается одновременно и урдением, и мурлением
Джон иногда урдит
Джон иногда урдит, а иногда мурлит
]]
end

function logic.journalist(req)
return logic_task [[
Журналисты наврали, что бздыш болотный безграмотен и нахален
те журналисты солгали
на самом деле бздыш болотный образован и тактичен
на самом деле бздыш болотный безграмотен, но не нахален
]]
end

function logic.burdylka(req)
return logic_task [[
Если тряхнуть бурдылькой, то начнется стрельба. Бурдылькой тряхнули
стрельба начнется когда-нибудь или уже началась
стрельба уже началась
стрельба начнется когда-нибудь
]]
end

function logic.perpelka(req)
return logic_task [[
Если тряхнуть перпелькой, то немедленно начнется стрельба. За последний час стрельбы не было
в течении последнего часа перпелькой не трясли
в течении последнего часа перпелькой трясли
а нечего было трясти чем попало
]]
end

function logic.butryak(req)
return logic_task [[
Огромный бутряк напугал деревенского старосту
староста был напуган
старосте приснился ночной кошмар
староста попробовал некачественной выпивки
]]
end

function logic.ugubka(req)
return logic_task [[
Если почесать угубку за ухом, он начнет довольно шипеть. Если угубок довольно зашипит, то молоко поблизости скиснет
если почесать угубка за ухом, молоко поблизости скиснет
если не чесать угубка за ухом, то молоко поблизости не скиснет
молоко вдалеке никогда не скисает от чесания угубков
]]
end

function logic.oburivaet(req)
return logic_task [[
Всех, кто громко обуривает, обязательно съедают. Все ухмырки постоянно громко обуривают
всех ухмырков обязательно съедают
все, кто громко обуривает,- ухмырки
некоторых ухмырков не съедают
]]
end

function logic.vobla(req)
return logic_task [[
В реках близ Тимуграда обитает и вобла, и щука
в реках близ Тимуграда обитает щука
в реках близ Тимуграда не бывает воблы
в реках близ Тимуграда обитает только вобла и щука
]]
end

function logic.pufelka(req)
return logic_task [[
Все пуфелки радуют умом или красотой, а иногда даже и тем, и другим
не бывает глупых некрасивых пуфелок
пуфелка не может быть глупой
не бывает умных красивых пуфелок
]]
end

function logic.muhryaet(req)
return logic_task [[
Когда вы спите, вы всегда мухряете
если вы не мухряете, значит, вы не спите
если вы мухряете, значит, вы спите
если вы не спите, вы не мухряете
]]
end

function logic.yga(req)
return logic_task [[
Все болельщики любят ыгу
не бывает болельщиков, которые не любят ыгу
все, кто любит ыгу, болеет за кого-нибудь
не бывает болельщиков, которые любят ыгу
]]
end

function logic.zdunec(req)
return logic_task [[
Есть только два вида здунцов: красные и синие. Что касается этого конкретного здунца, то он оказался вовсе не синим
этот здунец красный
этот здунец синий
этот здунец синекрасный
]]
end

function logic.bydlozavr(req)
return logic_task [[
Найдено множество останков быдлозавров. Но все они очень плохо сохранились
некоторые останки быдлозавров очень плохо сохранились
по крайней мере некоторые останки быдлозавров в отличном состоянии
некоторые найденные останки быдлозавров сохранились хорошо
]]
end

function logic.lapuhondriya(req)
return logic_task [[
Некоторые лапухондрии не стабильны
не всякая лапухондрия стабильна
не всякая лапухондрия не стабильна
существуют стабильные лапухондрии
]]
end

function logic.dukni(req)
return logic_task [[
Говорили, что дукни и острые, и твердые. Оказывается, это вовсе не так
на самом деле дукни тупые или мягкие или то и другое сразу
на самом деле дукни тупые и мягкие
на самом деле дукни тупые или мягкие, но не то и другое сразу
]]
end

function logic.kaflya(req)
return logic_task [[
Кафля всегда либо бегает, либо дышит
Кафля не дышит на бегу
Кафля дышит на бегу
Кафля не дышит стоя
]]
end

function logic.meeting(req)
return logic_task [[
Информация о том, что завтрашнее совещание будет посвящено альным утятам, оказалась ложной
информация оказалась ложной
совещание будет посвящено не утятам
совещание будет посвящено утятам, но вовсе не альным
]]
end

function logic.uuzka(req)
return logic_task [[
Если облить уузку водой, она испортится сразу же. Эта уузка не испорчена. Сейчас я оболью ее водой
уузка испортится
не надо обижать уузку
уузка не испортится
]]
end

function logic.uuzka2(req)
return logic_task [[
Если облить уузку водой, она испортится сразу же. Эта уузка не была испорчена
уузку не обливали
уузку обливали
да отстаньте вы от уузки
]]
end

function logic.vasya(req)
return logic_task [[
Вася бросил проходить этот тест, ответив только на 28 вопросов из 30
Вася не закончил тест
Вася устал, проходя тест
Вася заколебался, проходя тест
]]
end

function logic.bushka(req)
return logic_task [[
Если покормить бушку, она успокоится. Спокойную бушку можно доить
после кормления бушку можно доить
если бушку не кормить, ее нельзя будет доить
бушку можно доить, но не кормить, она сама чего-нибудь найдет и съест
]]
end

function logic.moloko(req)
return logic_task [[
Если обрадовать бушку, она даст молока. Бушка обрадуется, если дернуть ее за хвост
если дернуть бушку за хвост, она даст молока
никто не обрадуется, если дернуть его за хвост
если не дернуть бушку за хвост, она не даст молока
]]
end

return logic
